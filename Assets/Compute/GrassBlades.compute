// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//Input
struct SourceVertex {
    float3 positionOS;
    float3 normalOS;
    float2 uv;
};
StructuredBuffer<SourceVertex> _SourceVertices;

//Output
struct DrawVertex {
    float3 positionWS;
    float2 uv;
};

struct DrawTriangle {
    float3 normalOS;
    DrawVertex vertices[3];
};
//Output vertices
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

//args
struct IndirectArgs {
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

float4x4 _LocalToWorld;

int _NumSourceTriangles;
int _SegmentsPerBlade;

float _GrassHeight;
float _GrassWidth;

// Blade
half _BladeRadius;
float _BladeForward;
float _BladeCurve;

#define MAX_GRASS_SEGMENTS 10  // segments per blade allowed
#define GRASS_VERTICES_PER_BLADE (MAX_GRASS_SEGMENTS * 2 + 1)

DrawVertex TransformToWorldSpace(SourceVertex v) {
    DrawVertex o;
    o.positionWS = mul(_LocalToWorld, float4(v.positionOS, 1)).xyz;
    o.uv = v.uv;
    return o;
}

DrawVertex GetGrassVertex(float3 positionOS, float3 offset, float width, float height, float2 uv) {
    DrawVertex output;
    float3 newPos = float3(width * (uv.x - 0.5), height * uv.y, 0);
    newPos += positionOS + offset;
    output.positionWS = mul(_LocalToWorld, float4(newPos, 1)).xyz;
    output.uv = uv;
    return output;
}

void AppendTriangle(DrawVertex drawVertices[GRASS_VERTICES_PER_BLADE], int k, float3 faceNormal) {
    DrawTriangle tri = (DrawTriangle)0;
    tri.normalOS = faceNormal;
    tri.vertices[0] = drawVertices[k];
    tri.vertices[1] = drawVertices[k + 1];
    tri.vertices[2] = drawVertices[k + 2];
    _DrawTriangles.Append(tri);
}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    if ((int)id.x >= _NumSourceTriangles) {
        return;
    }
    SourceVertex sv = _SourceVertices[id.x];
    SourceVertex svNext = _SourceVertices[id.x + 1];
    float distance = svNext.positionOS.x - sv.positionOS.x;

    float3 perpendicularAngle = float3(0, 0, 1);
    float3 faceNormal = cross(perpendicularAngle, sv.normalOS); 
    
    int numSegmentsPerBlade = min(MAX_GRASS_SEGMENTS, max(1, _SegmentsPerBlade));
    int numBladesPerVert = 3;
    int numTrianglesPerBlade = (numSegmentsPerBlade - 1) * 2 + 1;
    
    float segmentHeight = _GrassHeight;
    float segmentWidth = _GrassWidth;
    float3 newPos = float3(sv.positionOS.x, sv.positionOS.y, sv.positionOS.z);
    
    DrawVertex drawVertices[GRASS_VERTICES_PER_BLADE];
    for (int j = 0; j < numBladesPerVert; ++j)
    {
        float step = distance / (float)numBladesPerVert * j;
        float3 offset = float3(step, 0, 0);
        
        for (int i = 0; i < numSegmentsPerBlade; ++i) {
            float v = i / (float)numSegmentsPerBlade;
            float u = v * v * 0.5f;
            
            drawVertices[i * 2] = GetGrassVertex(newPos, offset, segmentWidth, segmentHeight, float2(u, v));
            drawVertices[i * 2 + 1] = GetGrassVertex(newPos, offset, segmentWidth, segmentHeight,float2(1 - u, v));
        }
        drawVertices[numSegmentsPerBlade * 2] = GetGrassVertex(newPos, offset, 0, _GrassHeight, float2(0.5, 1));
        
        for (int k = 0; k < numTrianglesPerBlade; ++k) {
            AppendTriangle(drawVertices, k, faceNormal);
        }
    }
    
    // counts the number of vertices, storing it in the indirect arguments
    // This tells the renderer how many vertices are in the mesh in DrawProcedural
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, numTrianglesPerBlade * 3 * numBladesPerVert);
}



