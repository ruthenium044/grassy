// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

//Input
struct SourceVertex {
    float3 positionOS;
    float3 normalOS;
    float2 uv;
};
StructuredBuffer<SourceVertex> _SourceVertices;
StructuredBuffer<int> _SourceTriangles;

//Output
struct DrawVertex {
    float3 positionWS;
    float2 uv;
};

struct DrawTriangle {
    float3 normalOS;
    DrawVertex vertices[3];
};
//Output vertices
AppendStructuredBuffer<DrawTriangle> _DrawTriangles;

//args
struct IndirectArgs {
    uint numVerticesPerInstance;
    uint numInstances;
    uint startVertexIndex;
    uint startInstanceIndex;
};
RWStructuredBuffer<IndirectArgs> _IndirectArgsBuffer;

float4x4 _LocalToWorld;
float _Time;

int _NumSourceTriangles;
int _SegmentsPerBlade;
int _BladesPerVertex;

float _GrassHeight;
float _GrassWidth;
float _GrassHeightFactor;
float _GrassWidthFactor;

float _BladeForward;
float _BladeCurve;
float _OriginDisplacement;

//Camera LOD
float3 _CameraLOD;
float4 _ObjPos;

//Wind
half _WindSpeed;
float _WindStrength;
float _DisplacementRadius;

#define PI 3.14159265358979323846
#define MAX_GRASS_SEGMENTS 10  // segments per blade allowed
#define GRASS_VERTICES_PER_BLADE (MAX_GRASS_SEGMENTS * 2 + 1)

//https://dvic.devinci.fr/tutorial/Cellular-Automata-with-Shaders
float customRand (float2 st, float seed) {
    return max(0.001, frac(sin(dot(st.xy + seed.xx, float2(12.9898,78.233) * 0.2)) * 43758.5453123));
}
// 2D Noise based on Morgan McGuire @morgan3d
// https://www.shadertoy.com/view/4dS3Wd
float noise (float2 st, float seed) {                                 
    float2 i = floor(st);
    float2 f = frac(st);
    // Four corners in 2D of a tile
    float a = customRand(i, seed);
    float b = customRand(i + float2(1.0, 0.0), seed);
    float c = customRand(i + float2(0.0, 1.0), seed);
    float d = customRand(i + float2(1.0, 1.0), seed);
    // Cubic Hermine Curve.  Same as SmoothStep()
    float2 u = f*f*(3.0-2.0*f);
    // Mix 4 coorners percentages
    return lerp(a, b, u.x) + (c - a) * u.y * (1.0 - u.x) + (d - b) * u.x * u.y;
}

//https://en.wikipedia.org/wiki/Rotation_matrix
float3x3 AxisAngleRotation(float angle, float3 axis) {
    float s = sin(angle);
    float c = cos(angle);
    float3x3 rotation = float3x3(
        c + axis.x * axis.x * (1.0f - c), axis.x * axis.y * (1.0f - c) - axis.z * s, axis.x * axis.z * (1.0f - c) + axis.y * s,
        axis.x * axis.y * (1.0f - c) + axis.z * s, c + axis.y * axis.y * (1.0f - c), axis.y * axis.z * (1.0f - c) - axis.x * s,
        axis.x * axis.z * (1.0f - c) + axis.y * s, axis.y * axis.z * (1.0f - c) - axis.x * s, c + axis.z * axis.z * (1.0f - c));
    return rotation;
}

//https://stackoverflow.com/questions/19654251/random-point-inside-triangle-inside-java
float3 GetTrianglePoint(float3 a, float3 b, float3 c, float seed) {
    float r1 = sqrt(customRand(a.xz, seed));
    float r2 = customRand(c.xz, seed);
    float3 pt = (1.0f - r1) * a + (r1 * (1.0f - r2)) * b + (r1 * r2) * c;
    return pt;
}

float3 TransformToWorldSpace(float3 v) {
    return mul(_LocalToWorld, float4(v, 1.0f)).xyz;
}

float3 GetTriangleNormal(float3 a, float3 b, float3 c) {
    float3 u = b - a;
    float3 v = c - a;
    return cross(u, v);
}

float3 GetTriangleCenter(float3 a, float3 b, float3 c) {
    return (a + b + c) / 3.0f;
}

float2 GetBladeSize(float3 pos, float seed) {
    float2 size;
    size.x = customRand(pos.xz, seed) * _GrassWidthFactor + _GrassWidth;
    size.y = customRand(pos.xz, seed) * _GrassHeightFactor + _GrassHeight;
    return size;
}

float2 GetBladeSizeFaded(float3 positionWS, float2 size) {
    float dist = distance(positionWS, _ObjPos.xyz);
    dist = 1.0f - smoothstep(_CameraLOD.x, _CameraLOD.y, dist);
    dist = pow(abs(dist), _CameraLOD.z);
    return min(size, max(0.0f, dist * size));
}

float GetBladeAngle(float3 pos, float seed) {
    return customRand(pos.xz, seed) * PI * 2.0f;
}

float3 GetWindOffset(float3 pos) {
    float x = sin(_WindSpeed * _Time.x + pos.x) + sin(_WindSpeed * _Time.x + pos.x * 2) + sin(_WindSpeed * _Time.x * 0.1f + pos.x);
    float y = cos(_WindSpeed * _Time.x + pos.z);
    float z = cos(_WindSpeed * _Time.x + pos.z) + cos(_WindSpeed * _Time.x + pos.z * 2);
    return float3(x * _WindStrength, y * _WindStrength, z * _WindStrength);
}

float3 GetWindAxis(float3 positionWS, float3 normalWS) {
    // Calculate the wind axis which also encodes the wind strength
    // The windUV is affected by the position's XZ world position and the time since scene load (_Time.y)
    float2 windUV = positionWS.xz * _WindStrength + _Time.x * _WindSpeed;
    float windScale = 4;
    // Sample the wind noise texture and remap to range between -1 and 1
    float2 windNoise = noise(windUV * windScale, 1) * 2 - 1;
    // We want to grass to blow by rotating in a direction perpendicular to it's normal
    // cross will find one such vector. Since windNoise is not normalized, it also encodes some strength
    return cross(normalWS, float3(windNoise.x, 0, windNoise.y));
}

DrawVertex GetGrassVertex(float3 positionOS, float curve, float2 size, float angle, float2 uv, float3 windAxis) {
    DrawVertex output;

    
    //float3 newPos = float3(size.x * (uv.x - 0.5), size.y * uv.y, curve);
    ////float3 windOffset = GetWindOffset(newPos);
    ////newPos += windOffset * uv.y;
    //
    //float3x3 rotationMatrix = AxisAngleRotation(angle, float3(0, 1, 0));
    //float3x3 windMatrix = AxisAngleRotation(uv.y * 0.4, windAxis);
    ////rotationMatrix *= windMatrix;
    //
    //float3x3 transform = windMatrix;
    float3 newPos = float3(size.x * (uv.x - 0.5), size.y * uv.y, 0.0f);
    //inital blade base rotation towards random direction
    float3x3 rotationMatrix = AxisAngleRotation(angle, float3(0, 1, 0));
    //angle from wind direction. not needed anymore
    //angle += atan2(windAxis.x, windAxis.z) * 2 * PI;

    //wind rotation towards the wind
    float strength = 1.0f;
    float3x3 windRotationMatrix = AxisAngleRotation(uv.y * strength, windAxis);
    //float3x3 windAxisRotationMatrix = AxisAngleRotation(angle, windAxis);
    
    newPos += positionOS + mul(rotationMatrix + windRotationMatrix, newPos);
    //newPos = positionOS + mul(transform, newPos);
    
    output.positionWS = TransformToWorldSpace(newPos);
    output.uv = uv;
    return output;
}

void AppendTriangle(DrawVertex drawVertices[GRASS_VERTICES_PER_BLADE], int k, float3 faceNormal) {
    DrawTriangle tri = (DrawTriangle)0;
    int factor = k % 2 == 0;
    tri.vertices[0] = drawVertices[k + (!factor * 2)];
    tri.vertices[1] = drawVertices[k + 1];
    tri.vertices[2] = drawVertices[k + (factor * 2)];
    
    //faceNormal = GetTriangleNormal(tri.vertices[0].positionWS, tri.vertices[1].positionWS, tri.vertices[2].positionWS);
    tri.normalOS = faceNormal;
    _DrawTriangles.Append(tri);
}

int GetSegments(float3 positionWS) {
    float dist = distance(positionWS, _ObjPos.xyz);
    dist = 1 - smoothstep(_CameraLOD.x, _CameraLOD.y, dist);
    dist = pow(abs(dist), _CameraLOD.z);
    return min(MAX_GRASS_SEGMENTS, max(0, ceil(dist * _SegmentsPerBlade)));
}

float3 GetObjectOffset(float3 pos) {
    float3 dist = distance(_ObjPos.xyz, pos);
    float3 circle = max(0, 1 - saturate(dist / _DisplacementRadius));
    float3 sphereDisplacement = pos - _ObjPos.xyz;
    sphereDisplacement *= circle;
    return sphereDisplacement;
}

[numthreads(128,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID) {
    if ((int)id.x >= _NumSourceTriangles) {
        return;
    }
    int triStart = id.x * 3;
    SourceVertex inputs[3];
    inputs[0] = _SourceVertices[_SourceTriangles[triStart]];
    inputs[1] = _SourceVertices[_SourceTriangles[triStart + 1]];
    inputs[2] = _SourceVertices[_SourceTriangles[triStart + 2]];
    
    float3 centerPos = GetTriangleCenter(inputs[0].positionOS, inputs[1].positionOS, inputs[2].positionOS);
    int numBladesPerVert = _BladesPerVertex;
    int numSegmentsPerBlade = GetSegments(TransformToWorldSpace(centerPos)); //min(MAX_GRASS_SEGMENTS, max(1, _SegmentsPerBlade));
    int numTrianglesPerBlade = (numSegmentsPerBlade - 1) * 2 + 1;
    
    DrawVertex drawVertices[GRASS_VERTICES_PER_BLADE];
    float3 normal = GetTriangleCenter(inputs[0].normalOS, inputs[1].normalOS, inputs[2].normalOS);
    
    for (int j = 0; j < numBladesPerVert; ++j)
    {
        float seed = id.x + j;
        float3 newPos = GetTrianglePoint(inputs[0].positionOS, inputs[1].positionOS, inputs[2].positionOS, seed);
        
        float angle = GetBladeAngle(newPos, seed);
        float2 size = GetBladeSize(newPos, seed);
        size.x = GetBladeSizeFaded(TransformToWorldSpace(newPos), size).x;

        float3 windAxis = GetWindAxis(TransformToWorldSpace(newPos), normal);
        
        for (int i = 0; i < numSegmentsPerBlade; ++i) {
            float v = i / (float)numSegmentsPerBlade;
            float u = v * 0.5f;
            
            newPos += GetObjectOffset(TransformToWorldSpace(newPos));
            if (v == 0) { u += _OriginDisplacement; }
            float segmentForward = pow(abs(v), _BladeCurve) * _BladeForward;
            
            drawVertices[i * 2] = GetGrassVertex(newPos, segmentForward, size, angle, float2(u, v), windAxis);
            drawVertices[i * 2 + 1] = GetGrassVertex(newPos, segmentForward, size, angle, float2(1 - u, v), windAxis);
        }
        drawVertices[numSegmentsPerBlade * 2] = GetGrassVertex(newPos, _BladeForward, size, angle, float2(0.5, 1), windAxis);
        for (int k = 0; k < numTrianglesPerBlade; ++k) {
            AppendTriangle(drawVertices, k, normal);
        }
    }
    
    // counts the number of vertices, storing it in the indirect arguments
    // This tells the renderer how many vertices are in the mesh in DrawProcedural
    InterlockedAdd(_IndirectArgsBuffer[0].numVerticesPerInstance, max(0, numTrianglesPerBlade) * 3 * numBladesPerVert);
}



